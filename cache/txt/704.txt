  
 The Manchester Small-Scale Experimental Machine (SSEM), nicknamed Baby, was the world's first stored-program computer. It was built at the Victoria University of Manchester by Frederic C. Williams, Tom Kilburn and Geoff Tootill, and ran its first program on 21 June 1948.[1] 
 The machine was not intended to be a practical computer but was instead designed as a testbed for the Williams tube, an early form of computer memory. Although considered "small and primitive" by the standards of its time, it was the first working machine to contain all of the elements essential to a modern electronic computer.[2] As soon as the SSEM had demonstrated the feasibility of its design, a project was initiated at the university to develop it into a more usable computer, the Manchester Mark 1. The Mark 1 in turn quickly became the prototype for the Ferranti Mark 1, the world's first commercially available general-purpose computer.[3] 
 The SSEM had a 32-bit word length and a memory of 32 words. As it was designed to be the simplest possible stored-program computer, the only arithmetic operations implemented in hardware were subtraction and negation; other arithmetic operations were implemented in software. The first of three programs written for the machine found the highest proper divisor of 218 (262,144), a calculation that was known would take a long time to run—and so prove the computer's reliability—by testing every integer from 218 − 1 downwards, as division was implemented by repeated subtraction of the divisor. The program consisted of 17 instructions and ran for 52 minutes before reaching the correct answer of 131,072, after the SSEM had performed 3.5 million operations (for an effective CPU speed of 1.1 kIPS). 
 [edit] Background 
 The first design for a program-controlled computer was Charles Babbage's Analytical Engine in the 1830s. A century later, in 1936, mathematician Alan Turing published his description of what became known as a Turing machine, a theoretical concept intended to explore the limits of mechanical computation. Turing was not imagining a physical machine, but a person he called a "computer", who acted according to the instructions provided by a tape on which symbols could be read and written sequentially as the tape moved under a tape head. Turing proved that if an algorithm can be written to solve a mathematical problem, then a Turing machine can execute that algorithm.[4] 
 Konrad Zuse's Z3 was the world's first working programmable, fully automatic computer, with binary digital arithmetic logic, but it lacked the conditional branching of a Turing machine. On 12 May 1941, it was successfully presented to an audience of scientists of the Deutsche Versuchsanstalt für Luftfahrt ("German Laboratory for Aviation") in Berlin.[5] The Z3 stored its program on an external tape, but it was electromechanical rather than electronic. The Colossus of 1943 was the first electronic computing device, but was not a general-purpose machine.[citation needed] 
 The ENIAC (1946) was the first machine that was both electronic and general purpose. It was Turing complete, with conditional branching, and programmable to solve a wide range of problems, but its program was held in the state of switches in patchcords, not in memory, and it could take several days to reprogram.[2] Researchers such as Turing and Konrad Zuse investigated the idea of using the computer's memory to hold the program as well as the data it was working on,[6] but it was mathematician John von Neumann who became widely credited with defining that computer architecture, still used in almost all computers.[7] 
 The construction of a von Neumann computer depended on the availability of a suitable memory device on which to store the program. During the Second World War researchers working on the problem of removing the clutter from radar signals had developed a form of delay line memory, the first practical application of which was the mercury delay line, developed by J. Presper Eckert. Radar transmitters send out regular brief pulses of radio energy, the reflections from which are displayed on a CRT screen. As operators are usually interested only in moving targets, it was desirable to filter out any distracting reflections from stationary objects. The filtering was achieved by comparing each received pulse with the previous pulse, and rejecting both if they were identical, leaving a signal containing only the images of any moving objects. To store each received pulse for later comparison it was passed through a transmission line, delaying it by exactly the time between transmitted pulses. 
 Turing joined the National Physical Laboratory (NPL) in October 1945, by which time scientists within the Ministry of Supply had concluded that Britain needed a National Mathematical Laboratory to coordinate machine-aided computation. A Mathematics Division was set up at the NPL, and on 19 February 1946 Alan Turing presented a paper outlining his design for an electronic stored-program computer to be known as the Automatic Computing Engine (ACE). This was one of several projects set up in the years following the Second World War with the aim of constructing a stored-program computer. At about the same time, EDVAC was under development at the University of Pennsylvania's Moore School of Electrical Engineering, and the University of Cambridge Mathematical Laboratory was working on EDSAC. 
 The NPL did not have the expertise to build a machine like ACE, so they contacted Tommy Flowers at the General Post Office's (GPO) Dollis Hill Research Laboratory. Flowers, the designer of Colossus, the world's first programmable electronic computer, was committed elsewhere and was unable to take part in the project, although his team did build some mercury delay lines for ACE. The Telecommunications Research Establishment (TRE) was also approached for assistance, as was Maurice Wilkes at the University of Cambridge Mathematical Laboratory. 
 The government department responsible for the NPL decided that, of all the work being carried out by the TRE on its behalf, ACE was to be given the top priority. NPL's decision led to a visit by the superintendent of the TRE's Physics Division on 22 November 1946, accompanied by Frederic C. Williams and A. M. Uttley, also from the TRE. Williams led a TRE development group working on CRT stores for radar applications, as an alternative to delay lines.[13] He had already accepted a professorship at the University of Manchester, and most of his circuit technicians were in the process of being transferred to the Department of Atomic Energy. The TRE agreed to second a small number of technicians to work under Williams' direction at the university, and to support another small group working with Uttley at the TRE. 
 [edit] Williams tube 
 Main article: Williams tube 
 Although early computers such as CSIRAC made successful use of mercury delay line memory,[14] the technology had several drawbacks; it was heavy, it was expensive, and it did not allow data to be accessed randomly. In addition, because data was stored as a sequence of acoustic waves propagated through a mercury column, the device's temperature had to be very carefully controlled, as the velocity of sound through a medium varies with its temperature. Williams had seen an experiment at Bell Labs demonstrating the effectiveness of cathode ray tubes (CRT) as an alternative to the delay line for removing ground echoes from radar signals. While working at the TRE, shortly before he joined the University of Manchester in December 1946, he had developed a form of electronic memory known as the Williams tube based on a standard CRT, the first random-access digital storage device.[15] The Manchester Small-Scale Experimental Machine (SSEM) was designed to prove that the Williams tube was a practical storage device, by testing that data held within it could be continuously updated at the speed necessary for use in a computer.[16] 
 For use in a binary digital computer, the tube had to be capable of storing either one of two states at each of its memory locations, corresponding to the binary digits (bits) 0 and 1. It exploited the positive or negative electrostatic charge generated by displaying either a dash or a dot at any position on the CRT screen, a phenomenon known as secondary emission. A dash generated a positive charge, and a dot a negative charge, either of which could be picked up by a detector plate in front of the screen; a negative charge represented 0, and a positive charge 1. The charge dissipated in about 0.2 seconds, but it could be automatically refreshed from the data picked up by the detector.[17] 
 The Williams tube was initially based on the CV1131, a commercially available 12-inch (300 mm) diameter CRT, but a smaller 6-inch (150 mm) tube, the CV1097, was used in the SSEM.[18] 
 [edit] Development and design 
 Following his appointment to the Chair of Electrical Engineering at Manchester University, Williams recruited his TRE colleague Tom Kilburn on secondment. By the autumn of 1947 the pair had increased the storage capacity of the Williams tube from one bit to 2,048, arranged in a 64 by 32-bit array,[19] and demonstrated that it was able to store those bits for four hours.[20] Engineer Geoff Tootill joined the team on loan from TRE in September 1947, and remained on secondment until April 1949.[21] 
 Max Newman had been appointed to the Chair of Pure Mathematics at Manchester University in 1945. During the Second World War he had worked as a cryptanalyst at Bletchley Park, and had led the team which in 1943 produced the first of the Colossus code-breaking computers. Although Newman played no active role in the development of the SSEM, or any of the subsequent Manchester computers, he was generally supportive and enthusiastic about the project, and arranged for the acquisition of war-surplus supplies for its construction, including GPO metal racks from Bletchley.[22] 
 By June 1948 the SSEM had been built and was working.[19] It was 17 feet (5.2 m) in length, 7 feet 4 inches (2.24 m) tall, and weighed almost 1 long ton (1.0 t). The machine contained 550 valves—300 diodes and 250 pentodes—and had a power consumption of 3500 watts.[23] The arithmetic unit was built using EF50 pentode valves, which had been widely used during wartime.[20] The SSEM used one Williams tube to provide 32 by 32-bit words of random-access memory (RAM), a second to hold a 32-bit accumulator in which the intermediate results of a calculation could be stored temporarily, and a third to hold the current program instruction along with its address in memory. A fourth CRT, without the storage electronics of the other three, was used as the output device, able to display the bit pattern of any selected storage tube.[24] 
 Each 32-bit word of RAM could contain either a program instruction or data. In a program instruction, bits 0–12 represented the memory address of the operand to be used, and bits 13–15 specified the operation to be executed, such as storing a number in memory; the remaining 16 bits were unused.[24] The SSEM's single operand architecture meant that the second operand of any operation was implicit: the accumulator or the program counter (instruction address); program instructions specified only the address of the data in memory. 
 A word in the computer's memory could be read, written, or refreshed, in 360 microseconds. An instruction took four times as long to execute as accessing a word from memory, giving an instruction execution rate of about 700 per second. The main store was refreshed continuously, a process which took 20 milliseconds to complete, as each of the SSEM's 32 words had to be read and then refreshed in sequence.[19] 
 The SSEM represented negative numbers using two's complement,[25] as most computers still do. In that representation, the value of the most significant bit denotes the sign of a number; positive numbers have a zero in that position and negative numbers a one. Thus the range of numbers that could be held in each 32-bit word was −231 to +231 − 1 (decimal: −2,147,483,648 to +2,147,483,647). 
 [edit] Programming 
 The SSEM's three bit instruction set allowed a maximum of eight (23) different instructions. In contrast to the modern convention, the machine's storage was arranged with the least significant digits to the left; thus a one was represented in three bits as "100", rather than the more conventional "001".[25] 
SSEM's instruction set[26]
Binary code
Original notation
Modern mnemonic
Operation
000
S, Cl
JMP S
Jump to the instruction at the address obtained from the specified memory address S[t 1] (absolute unconditional jump)
100
Add S, Cl
JRP S
Jump to the instruction at the program counter plus (+) the relative value obtained from the specified memory address S[t 1] (relative unconditional jump)
010
-S, C
LDN S
Take the number from the specified memory address S, negate it, and load it into the accumulator
110
c, S
STO S
Store the number in the accumulator to the specified memory address S
001 or
101[t 2]
SUB S
SUB S
Subtract the number at the specified memory address S from the value in accumulator, and store the result in the accumulator
011
Test
CMP
Skip next instruction if the accumulator contains a negative value
111
Stop
STP
Stop
 The awkward negative operations were a consequence of the SSEM's lack of hardware to perform any arithmetic operations except subtraction and negation. It was considered unnecessary to build an adder before testing could begin as addition can easily be implemented by subtraction,[24] i.e., x+y can be computed as −(−x−y). Therefore adding two numbers together, X and Y, required four instructions:[26] 
 
LDN X // load negative X into the accumulator
SUB Y // subtract Y from the value in the accumulator
STO S // store the result at S
LDN S // load negative value at S into the accumulator
 
 Programs were entered in binary form by stepping through each word of memory in turn, and using a set of 32 switches known as the input device to set the value of each bit of each word to either 0 or 1. The SSEM had no paper-tape reader or punch.[19] 
 [edit] First programs 
 Three programs were written for the computer. The first, consisting of 17 instructions, was written by Kilburn, and so far as can be ascertained first ran on 21 June 1948.[27] It was designed to find the highest proper factor of 218 (262,144) by trying every integer from 218 − 1 downwards. The divisions were implemented by repeated subtractions of the divisor. The SSEM took 3.5 million operations and 52 minutes to produce the answer (131,072). The program used eight words of working storage in addition to its 17 words of instructions, giving a program size of 25 words.[28] 
 Geoff Tootill wrote an amended version of the program the following month, and in mid-July Alan Turing—who had been appointed as a reader in the mathematics department at Manchester University in September 1948—submitted the third program, to carry out long division. Turing had by then been appointed to the nominal post of Deputy Director of the Computing Machine Laboratory at the University,[27] although the laboratory did not become a physical reality until 1951.[29] 
 [edit] Later developments 
 Williams and Kilburn reported on the SSEM in a letter to the Journal Nature, published in September 1948.[30] The machine's successful demonstration quickly led to the construction of a more practical computer, the Manchester Mark 1, work on which began in August 1948. The first version was operational by April 1949,[29] and it in turn led directly to the development of the Ferranti Mark 1, the world's first commercially available general-purpose computer.[3] 
 In 1998, a working replica of the SSEM, now on display at the Museum of Science and Industry in Manchester, was built to celebrate the 50th anniversary of the running of its first program. Demonstrations of the machine in operation are held regularly at the museum.[31] In 2008 an original panoramic photograph of the entire machine was discovered at the University of Manchester. The photograph, taken on 15 December 1948 by a research student, Alec Robinson, had been reproduced in The Illustrated London News in June 1949.[32][33]  
 [edit] See also 
 [edit] References 
 Notes 
 
 ^ Enticknap, Nicholas (Summer 1998), "Computing's Golden Jubilee", Resurrection (The Computer Conservation Society) (20), ISSN 0958-7403, http://www.cs.man.ac.uk/CCS/res/res20.htm#d, retrieved 19 April 2008
^ a b Early Electronic Computers (1946–51), University of Manchester, http://www.computer50.org/mark1/contemporary.html, retrieved 16 November 2008
^ a b Napper, R. B. E., Introduction to the Mark 1, The University of Manchester, http://www.computer50.org/mark1/mark1intro.html, retrieved 4 November 2008
^ Turing, A. M. (1936), "On Computable Numbers, with an Application to the Entscheidungsproblem", Proceedings of the London Mathematical Society, 2 42: 230–265, 1936–37, doi:10.1112/plms/s2-42.1.230, http://www.comlab.ox.ac.uk/activities/ieg/e-library/sources/tp2-ie.pdf, retrieved 18 September 2010
^ "Technische Universität Berlin – Rechenhilfe für Ingenieure" (in German). Technical University of Berlin. Archived from the original on 13 February 2009. http://web.archive.org/web/20090213222711/http://www2.tu-berlin.de/alumni/parTU/00dez/zuse.htm.
^ Zuse, Horst, Part 10: Konrad Zuse and the Stored Program Computer, "The Life and Work of Konrad Zuse", EPE Online (Wimborne Publishing), archived from the original on 2007-12-10, http://web.archive.org/web/20071210232351/http://www.epemag.com/zuse/default.htm, retrieved 16 November 2008
^ Lavington 1998, p. 7
^ Lavington 1998, p. 5
^ "How did CSIRAC work?", CSIRAC, University of Melbourne, 4 April 2006, http://www.csse.unimelb.edu.au/dept/about/csirac/store.html, retrieved 16 November 2008
^ "Early computers at Manchester University", Resurrection (The Computer Conservation Society) 1 (4), Summer 1992, ISSN 0958-7403, http://www.cs.man.ac.uk/CCS/res/res04.htm#g, retrieved 19 April 2008
^ Lavington 1998, pp. 13, 24
^ Lavington 1998, p. 12
^ Lavington 1998, pp. 12–13
^ a b c d Napper 2000, p. 366
^ a b Lavington 1998, p. 13
^ Lavington 1998, p. 16
^ Lavington 1998, pp. 6–7
^ (PDF) The "Baby": The World's First Stored-Program Computer, Manchester Museum of Science &amp; Industry, http://www.msim.org.uk/media/33871703/thebaby,theworldsfirststored-programcomputer.pdf, retrieved 15 November 2008
^ a b c Napper 2000, p. 367
^ a b Lavington 1998, p. 14
^ a b c Lavington 1998, p. 15
^ a b Lavington 1998, pp. 16–17
^ Tootill, Geoff (Summer 1998), "The Original Original Program", Resurrection (The Computer Conservation Society) (20), ISSN 0958-7403, http://www.cs.man.ac.uk/CCS/res/res20.htm#e, retrieved 19 April 2008
^ a b Lavington 1998, p. 17
^ Williams, F. C.; Kilburn, T. (25 September 1948), "Electronic Digital Computers", Nature 162: 487, doi:10.1038/162487a0, http://www.computer50.org/kgill/mark1/natletter.html, retrieved 22 January 2009
^ Meet Baby, Manchester Museum of Science &amp; Industry, archived from the original on June 26, 2008, http://web.archive.org/web/20080626114414/http://www.msim.org.uk/whats-on/meet-baby, retrieved 17 November 2008
^ Highfield, Roger (17 June 2008), "Photo of great grandfather of modern computers found", Daily Telegraph, http://www.telegraph.co.uk/earth/main.jhtml?view=DETAILS&amp;grid=&amp;xml=/earth/2008/06/17/scicomp117.xml, retrieved 20 June 2008
^ Panoramic image of SSEM and other audiovisual records (Digital 60, University of Manchester)
  
 Bibliography 
 
 Brown, Louis (1999), A Radar History of World War II: Technical and Military Imperatives, CRC Press, ISBN 978-0-7503-0659-1
Lavington, Simon (1980), Early British Computers: The Story of Vintage Computers and the People who built them (1st ed.), Manchester University Press Society, ISBN 0-7190-0803-4
Lavington, Simon (1998), A History of Manchester Computers (2 ed.), Swindon: The British Computer Society, ISBN 978-1-902505-01-5
Napper, R. B. E. (2000), "The Manchester Mark 1 Computers", in Rojas, Raúl; Hashagen, Ulf, The First Computers: History and Architectures, MIT Press, pp. 356–377, ISBN 0-262-68137-4, http://books.google.com/?id=nDWPW9uwZPAC
  
 [edit] Further reading 
 [edit] External links 
  